# Plot predicted confidence with error bars
ggplot(plot_data, aes(x = x, y = predicted, color = x)) +
geom_point() +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars for confidence intervals
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
scale_fill_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "Confidence (%)", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
)
# Model for timing data with motor side
reacting_motor_side_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ MotorSide + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_side_conf_model)
# Generate predicted values and confidence intervals
reacting_motor_side_conf_data <- ggpredict(reacting_motor_side_conf_model, terms = c("MotorSide"))
plot_data <- data.frame(reacting_motor_side_conf_data)
# Plotting predicted confidence with error bars based on Motor Side
ggplot(plot_data, aes(x = x, y = predicted, linetype = x)) +
geom_point(size = 5) +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars for confidence intervals
labs(y = "Confidence (%)", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
)
# ------------------------------------------------------- (Decision Time Plots, Figure 3) ------------------------------------------------------  #
# Plot for motor involvement
plot_data_involvement <- data.frame(reacting_motor_involvement_conf_data)
ggplot(plot_data_involvement, aes(x = x, y = predicted, color = x)) +
geom_point() +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 1.5) +  # Error bars
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "DTs", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
axis.text = element_text(color = "black", size = 25)
)
# Plot for motor side
plot_data_side <- data.frame(reacting_motor_side_conf_data)
ggplot(plot_data_side, aes(x = x, y = predicted, linetype = x)) +
geom_point(size = 5) +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars
labs(y = "DTs", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Half-eye and boxplot for Motor Involvement
p_involvement <- ggplot(data_reacting, aes(x = MotorInvolvement, y = ActionDataConfidenceReaction_z, color = MotorInvolvement)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
gghalves::geom_half_point(side = "l", range_scale = .6, alpha = .2, size = 0.4, pch = 20) +
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "RTs (norm.)", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Half-eye and boxplot for Motor Side
p_side <- ggplot(data_reacting, aes(x = MotorSide, y = ActionDataConfidenceReaction_z, linetype = MotorSide)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
stat_summary(fun.y = mean, geom = "point", size = 1, aes(color = "black")) +
labs(y = "Decision Times (norm.)", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Display the plots
p_involvement
p_side
################################ General Stats - RT TP Decision Time and Confidence Levels (Figure 3) ################################
### Author Information
cat("**Authors**: Sena Nur Bilgin, Tadeusz Kononowicz\n")
cat("**Affiliations**:\n")
cat("- Polish Academy of Sciences\n")
cat("- Paris Saclay University (Institute of Neuroscience, NEUROPSI)\n")
cat("**Corresponding Author**: [senanrbilgin@gmail.com](mailto:senanrbilgin@gmail.com)\n")
# Define color and line styles
cond_color_movement <- c('brown2', 'brown4')
cond_conf <- c('darkolivegreen3', 'darkgreen')
cond_line_dominance <- c('dotted', 'dashed')
cond_color_motor_rate <- c('blue', 'blue4')
# List of required libraries
libraries <- c(
"rmatio", "installr", "lme4", "sjPlot", "car", "tidyverse", "devtools", "hrbrthemes",
"viridis", "R.matlab", "readr", "broom.mixed", "ggplot2", "haven", "sjstats", "sjmisc",
"sjlabelled", "gridExtra", "data.table", "gapminder", "rstatix", "scales", "tidyr",
"emmeans", "plotly", "ggpubr", "dplyr", "plyr", "zoo", "patchwork", "interactions",
"lmerTest", "Matrix", "cowplot", "reshape2", "ggeffects", "robust",
"effects", "tableHTML", "report", "magrittr", "ggbreak", "ggiraphExtra", "ggpmisc", "robustbase",
"ggplotify", "ggplotlyExtra", "ggiraph", "jtools", "ggpmisc", "caret", "BBmisc",
"splines", "ggforce", "ggdist", "gghalves", "ggbeeswarm", "ggside"
)
# Function to load libraries
load_libraries <- function(libraries) {
for (lib in libraries) {
library(lib, character.only = TRUE)
}
}
# Load libraries
load_libraries(libraries)
# Read data
read_data <- function(file_path) {
fread(file_path)
}
timing_file <- "../Datasets/data_timing.csv"
reacting_file <- "../Datasets/data_reacting.csv"
data_timing <- read_data(timing_file)
data_reacting <- read_data(reacting_file)
# Convert relevant columns to factors with specified levels
convert_factors <- function(data, conf_levels_timing, conf_levels_reacting) {
data$conf_level <- factor(data$conf_level, levels = conf_levels_timing)
data$previous_feedback <- factor(data$previous_feedback, levels = c(0, 1))
data$feedback_category <- factor(data$feedback_category, levels = c("No Feedback", "Bad", "Good"))
data$motor_rate <- factor(data$motor_rate, levels = c("Low", "High"))
return(data)
}
# Convert factors for both datasets
data_timing <- convert_factors(data_timing, c("Low", "High"), NULL)
data_reacting <- convert_factors(data_reacting, c("Low", "High"), NULL)
# ------------------------------------------------------- Confidence TP ------------------------------------------------------  #
# Computing mean and standard deviation of confidence for timing data
timing_cv_summary <- ddply(data_timing,
.(SubjID, Session),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
timing_cv_summary <- na.omit(timing_cv_summary)
# Confidence summary by MotorSide
timing_cv_summary_MotorSide <- ddply(data_timing,
.(SubjID, Session, MotorSide),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
timing_cv_summary_MotorSide <- na.omit(timing_cv_summary_MotorSide)
# Confidence summary by MotorInvolvement
timing_cv_summary_MotorInvolvement <- ddply(data_timing,
.(SubjID, Session, MotorInvolvement),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
timing_cv_summary_MotorInvolvement <- na.omit(timing_cv_summary_MotorInvolvement)
# Linear mixed-effects models - Session Level
## Timing Session Level Mean comparison
mean_Session_MotorInvolvement <- lmer(mean_confidence ~ MotorInvolvement + (1 | SubjID),
data = timing_cv_summary_MotorInvolvement)
summary(mean_Session_MotorInvolvement)
report(mean_Session_MotorInvolvement)
mean_Session_MotorSide <- lmer(mean_confidence ~ MotorSide + (1 | SubjID),
data = timing_cv_summary_MotorSide)
summary(mean_Session_MotorSide)
report(mean_Session_MotorSide)
# Standard deviation session-level models
std_Session_MotorInvolvement <- lmer(sdev_confidence ~ MotorInvolvement + (1 | SubjID),
data = timing_cv_summary_MotorInvolvement)
summary(std_Session_MotorInvolvement)
std_Session_MotorSide <- lmer(sdev_confidence ~ MotorSide + (1 | SubjID),
data = timing_cv_summary_MotorSide)
summary(std_Session_MotorSide)
# Model for timing data with motor involvement
data_timing$MotorInvolvement <- as.factor(data_timing$MotorInvolvement)
data_timing$MotorSide <- as.factor(data_timing$MotorSide)
# Relevel factors for analysis
data_timing$MotorInvolvement <- relevel(data_timing$MotorInvolvement, ref = "Press")
data_timing$MotorSide <- relevel(data_timing$MotorSide, ref = "DS")
### Analysis of Less Confident Responses
# Model for timing data with motor involvement
timing_motor_involvement_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ MotorInvolvement + (1 | SubjID),
data = data_timing)
summary(timing_motor_involvement_conf_model)
timing_motor_involvement_conf_data <- ggpredict(timing_motor_involvement_conf_model,
terms = c("MotorInvolvement"))
plot(timing_motor_involvement_conf_data)
report(timing_motor_involvement_conf_model)
# Model for timing data with motor side
timing_motor_side_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ relevel(as.factor(MotorSide), 1) + (1 | SubjID),
data = data_timing)
summary(timing_motor_side_conf_model)
report(timing_motor_side_conf_model)
timing_motor_side_conf_data <- ggpredict(timing_motor_side_conf_model,
terms = c("MotorSide"))
plot(timing_motor_side_conf_data)
report(timing_motor_side_conf_model)
# ------------------------------------------------------- Confidence RT ------------------------------------------------------  #
# Computing mean and standard deviation of confidence for timing data
reacting_cv_summary <- ddply(data_reacting,
.(SubjID, Session),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
reacting_cv_summary <- na.omit(reacting_cv_summary)
# Confidence summary by MotorSide
reacting_cv_summary_MotorSide <- ddply(data_reacting,
.(SubjID, Session, MotorSide),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
reacting_cv_summary_MotorSide <- na.omit(reacting_cv_summary_MotorSide)
# Confidence summary by MotorInvolvement
reacting_cv_summary_MotorInvolvement <- ddply(data_reacting,
.(SubjID, Session, MotorInvolvement),
summarise,
mean_confidence = mean(ActionDataConfidenceYaxis_percent),
sdev_confidence = sd(ActionDataConfidenceYaxis_percent))
reacting_cv_summary_MotorInvolvement <- na.omit(reacting_cv_summary_MotorInvolvement)
# Linear mixed-effects models - Session Level
## Timing Session Level Mean comparison
mean_Session_MotorInvolvement <- lmer(mean_confidence ~ MotorInvolvement + (1 | SubjID),
data = reacting_cv_summary_MotorInvolvement)
summary(mean_Session_MotorInvolvement)
report(mean_Session_MotorInvolvement)
mean_Session_MotorSide <- lmer(mean_confidence ~ MotorSide + (1 | SubjID),
data = reacting_cv_summary_MotorSide)
summary(mean_Session_MotorSide)
report(mean_Session_MotorSide)
# Standard deviation session-level models
std_Session_MotorInvolvement <- lmer(sdev_confidence ~ MotorInvolvement + (1 | SubjID),
data = reacting_cv_summary_MotorInvolvement)
summary(std_Session_MotorInvolvement)
std_Session_MotorSide <- lmer(sdev_confidence ~ MotorSide + (1 | SubjID),
data = reacting_cv_summary_MotorSide)
summary(std_Session_MotorSide)
# Model for timing data with motor involvement
data_reacting$MotorInvolvement <- as.factor(data_reacting$MotorInvolvement)
data_reacting$MotorSide <- as.factor(data_reacting$MotorSide)
# Relevel factors for analysis
data_reacting$MotorInvolvement <- relevel(data_reacting$MotorInvolvement, ref = "Press")
data_reacting$MotorSide <- relevel(data_reacting$MotorSide, ref = "DS")
### Analysis of Less Confident Responses
# Model for timing data with motor involvement
reacting_motor_involvement_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ MotorInvolvement + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_involvement_conf_model)
reacting_motor_involvement_conf_data <- ggpredict(reacting_motor_involvement_conf_model,
terms = c("MotorInvolvement"))
plot(reacting_motor_involvement_conf_data)
report(reacting_motor_involvement_conf_model)
# Model for timing data with motor side
reacting_motor_involvement_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ relevel(as.factor(MotorSide), 1) + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_involvement_conf_model)
report(reacting_motor_involvement_conf_model)
reacting_motor_involvement_conf_data <- ggpredict(reacting_motor_involvement_conf_model,
terms = c("MotorSide"))
plot(reacting_motor_involvement_conf_data)
report(reacting_motor_involvement_conf_model)
# ------------------------------------------------------- DT RT ------------------------------------------------------  #
# Summarize reaction time data
reacting_cv_summary_rt <- ddply(data_reacting, .(SubjID, Session), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
reacting_cv_summary_MotorSide_rt <- ddply(data_reacting, .(SubjID, Session, MotorSide), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
reacting_cv_summary_MotorInvolvement_rt <- ddply(data_reacting, .(SubjID, Session, MotorInvolvement), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
# Model for timing data with motor involvement
reacting_motor_involvement_conf_model <- lmer(ActionDataConfidenceReaction ~ MotorInvolvement + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_involvement_conf_model)
reacting_motor_involvement_conf_data <- ggpredict(reacting_motor_involvement_conf_model, terms = c("MotorInvolvement"))
plot(reacting_motor_involvement_conf_data)
report(reacting_motor_involvement_conf_model)
# Model for timing data with motor side
reacting_motor_side_conf_model <- lmer(ActionDataConfidenceReaction ~ relevel(as.factor(MotorSide), 1) + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_side_conf_model)
reacting_motor_side_conf_data <- ggpredict(reacting_motor_side_conf_model, terms = c("MotorSide"))
plot(reacting_motor_side_conf_data)
report(reacting_motor_side_conf_model)
# ------------------------------------------------------- DT TP------------------------------------------------------  #
# Summarize reaction time data
timing_cv_summary_rt <- ddply(data_timing, .(SubjID, Session), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
timing_cv_summary_MotorSide_rt <- ddply(data_timing, .(SubjID, Session, MotorSide), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
timing_cv_summary_MotorInvolvement_rt <- ddply(data_timing, .(SubjID, Session, MotorInvolvement), summarise,
mean_rt = mean(ActionDataConfidenceReaction_z),
sdev_rt = sd(ActionDataConfidenceReaction_z)) %>%
na.omit()
# Model for timing data with motor involvement
timing_motor_involvement_conf_model <- lmer(ActionDataConfidenceReaction ~ MotorInvolvement + (1 | SubjID),
data = data_timing)
summary(timing_motor_involvement_conf_model)
timing_motor_involvement_conf_data <- ggpredict(timing_motor_involvement_conf_model, terms = c("MotorInvolvement"))
plot(timing_motor_involvement_conf_data)
report(timing_motor_involvement_conf_model)
# Model for timing data with motor side
timing_motor_side_conf_model <- lmer(ActionDataConfidenceReaction ~ relevel(as.factor(MotorSide), 1) + (1 | SubjID),
data = data_timing)
summary(timing_motor_side_conf_model)
timing_motor_side_conf_data <- ggpredict(timing_motor_side_conf_model, terms = c("MotorSide"))
plot(timing_motor_side_conf_data)
report(timing_motor_side_conf_model)
# ------------------------------------------------------- (Confidence Plots, Figure 3) ------------------------------------------------------  #
# Plotting Confidence based on Motor Involvement
p1 <- ggplot(data_reacting, aes(x = MotorInvolvement, y = ActionDataConfidenceYaxis_percent, color = MotorInvolvement)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
gghalves::geom_half_point(side = "l", range_scale = .6, alpha = .2, size = 0.4, pch = 20) +
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
scale_fill_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "Confidence (%)", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
) +
stat_summary(fun = mean, geom = "point", size = 1, aes(color = MotorInvolvement))
p1
# Plotting Confidence based on Motor Side
p2 <- ggplot(data_reacting, aes(x = MotorSide, y = ActionDataConfidenceYaxis_percent, linetype = MotorSide)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
gghalves::geom_half_point(side = "l", range_scale = .6, alpha = .2, size = 0.4, pch = 20) +
labs(y = "Confidence (%)", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
) +
stat_summary(fun = mean, geom = "point", size = 1, aes(color = "black"))
p2
# Model for Confidence based on Motor Involvement
reacting_motor_involvement_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ MotorInvolvement + (1 | SubjID),
data = data_reacting)
reacting_motor_involvement_conf_data <- ggpredict(reacting_motor_involvement_conf_model, terms = c("MotorInvolvement"))
plot_data <- data.frame(reacting_motor_involvement_conf_data)
# Plot predicted confidence with error bars
ggplot(plot_data, aes(x = x, y = predicted, color = x)) +
geom_point() +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars for confidence intervals
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
scale_fill_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "Confidence (%)", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
)
# Model for timing data with motor side
reacting_motor_side_conf_model <- lmer(ActionDataConfidenceYaxis_percent ~ MotorSide + (1 | SubjID),
data = data_reacting)
summary(reacting_motor_side_conf_model)
# Generate predicted values and confidence intervals
reacting_motor_side_conf_data <- ggpredict(reacting_motor_side_conf_model, terms = c("MotorSide"))
plot_data <- data.frame(reacting_motor_side_conf_data)
# Plotting predicted confidence with error bars based on Motor Side
ggplot(plot_data, aes(x = x, y = predicted, linetype = x)) +
geom_point(size = 5) +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars for confidence intervals
labs(y = "Confidence (%)", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
legend.title.align = 0.5,
legend.position = "none",
plot.title = element_text(color = "black", size = 25, face = "bold"),
plot.subtitle = element_text(color = "black", size = 25, face = "bold.italic"),
plot.caption = element_text(color = "black", size = 25, face = "italic"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 25),
strip.text.x = element_text(size = 25, color = "black", face = "bold"),
strip.text.y = element_text(size = 25, color = "black", face = "bold"),
axis.text.x = element_text(color = "black", size = 25, hjust = 0.5),
axis.text.y = element_text(size = 25, color = "black"),
strip.background = element_rect(fill = "lightYellow", size = 1, color = "black")
)
# ------------------------------------------------------- (Decision Time Plots, Figure 3) ------------------------------------------------------  #
# Plot for motor involvement
plot_data_involvement <- data.frame(reacting_motor_involvement_conf_data)
ggplot(plot_data_involvement, aes(x = x, y = predicted, color = x)) +
geom_point() +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 1.5) +  # Error bars
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "DTs", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.title.y = element_text(color = "black", size = 25, hjust = 0.5),
axis.text = element_text(color = "black", size = 25)
)
# Plot for motor side
plot_data_side <- data.frame(reacting_motor_side_conf_data)
ggplot(plot_data_side, aes(x = x, y = predicted, linetype = x)) +
geom_point(size = 5) +  # Dots for predicted values
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, size = 2.5) +  # Error bars
labs(y = "DTs", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Half-eye and boxplot for Motor Involvement
p_involvement <- ggplot(data_reacting, aes(x = MotorInvolvement, y = ActionDataConfidenceReaction_z, color = MotorInvolvement)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
gghalves::geom_half_point(side = "l", range_scale = .6, alpha = .2, size = 0.4, pch = 20) +
scale_color_manual(values = cond_color_movement, labels = c('1' = 'Move', '2' = 'Press')) +
labs(y = "RTs (norm.)", x = "Motor Involvement") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Half-eye and boxplot for Motor Side
p_side <- ggplot(data_reacting, aes(x = MotorSide, y = ActionDataConfidenceReaction_z, linetype = MotorSide)) +
ggdist::stat_halfeye(adjust = .6, width = .6, .width = 0, justification = -.2, point_colour = NA) +
geom_boxplot(width = .2, outlier.shape = NA) +
stat_summary(fun.y = mean, geom = "point", size = 1, aes(color = "black")) +
labs(y = "Decision Times (norm.)", x = "Motor Side") +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
plot.title = element_text(color = "black", size = 25, face = "bold"),
axis.text = element_text(color = "black", size = 25)
)
# Display the plots
p_involvement
p_side
